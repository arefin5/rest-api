openapi: 3.0.3
info:
  title: Bed Bd Rest Api
  description: API for Bed Bd Rest api.
  version: 1.0.0
servers:
  - url: http://localhost:5050/api
    description: Local server
  - url: http://45.77.247.238:5050/api
    description: Public Server   
tags:
  - name: Users
    description: User-related operations
paths:
  /generate-otp:
    post:
      tags:
        - Users
      summary: Generate OTP
      description: Generates an OTP and sends it to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP sent successfully
        "500":
          description: Internal Server Error

  /verify-otp:
    post:
      tags:
        - Users
      summary: Verify OTP
      description: Verifies the OTP sent to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                otp:
                  type: string
                  example: "123456"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP verified successfully
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid or expired OTP
        "500":
          description: Internal Server Error

  /register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Registers a new user with email, name, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword123
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
        "400":
          description: Email is already taken
        "500":
          description: Internal Server Error

  /login:
    post:
      tags:
        - Users
      summary: User login
      description: Logs in a user with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword123
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Incorrect password
        "404":
          description: No user found
        "500":
          description: Internal Server Error

  /profile:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieves the current authenticated user's profile.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized


  /edit-profile:
    put:
      tags:
        - Users
      summary: Update user profile
      description: Updates the profile information for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: user@example.com
                phone:
                  type: string
                  example: "+1234567890"
                birth:
                  type: string
                  example: "1990-01-01"  
                fatherName:
                  type: string
                  example: Father Name
                motherName:
                  type: string
                  example: Mother Name
                presentAddress:
                  type: string
                  example: Current Address
                parmanentAddress:
                  type: string
                  example: Permanent Address
                cover:
                  type: object
                  properties:
                    url:
                      type: string
                      example: "https://example.com/cover.jpg"
                    public_id:
                      type: string
                      example: "cover123"
                profilePic:
                  type: object
                  properties:
                    url:
                      type: string
                      example: "https://example.com/profile.jpg"
                    public_id:
                      type: string
                      example: "profilePic123"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
                  user:
                    $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "500":
          description: Internal Server Error
  /change-role/:
    put:
      tags:
        - Users
      summary: Change user role to host
      description: Changes the role of the authenticated user to "host".
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Role updated to host successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Role updated to host successfully
                  user:
                    $ref: "#/components/schemas/User"
        "404":
          description: User not found
        "500":
          description: Internal Server Error


  /google-facebook-login:
    post:
      tags:
        - Users
      summary: Google/Facebook Login
      description: Logs in a user using Google or Facebook login details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: user@example.com
                birth:
                  type: string
                  example: 1990-01-01
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Error in login process
        "500":
          description: Internal Server Error
  /forget-password:
    post:
      tags:
        - Users
      summary: Forgot Password
      description: Sends an OTP to the user's email for password reset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP sent to your email
        "404":
          description: User not found
        "500":
          description: Internal Server Error

  /verify-forget-pass:
    put:
      tags:
        - Users
      summary: Verify Forgot Password OTP
      description: Verifies the OTP sent to the user's email for password reset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                otp:
                  type: string
                  example: "123456"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP verified successfully
        "400":
          description: Invalid or expired OTP
        "404":
          description: User not found
        "500":
          description: Internal Server Error

  /reset-password:
    post:
      tags:
        - Users
      summary: Reset Password
      description: Resets the user's password after OTP verification.
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                newPassword:
                  type: string
                  example: newstrongpassword123
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated successfully
        "400":
          description: OTP not verified
        "404":
          description: User not found
        "500":
          description: Internal Server Error
  /generete-otp-phone:
    post:
      tags:
        - Users
      summary: Generate OTP for phone number
      description: Generates an OTP and sends it to the user's phone number.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+1234567890"
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP sent successfully
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error
  /verify-otp-phone:
      post:
        tags:
          - Users
        summary: Verify OTP for phone number
        description: Verifies the OTP sent to the user's phone number.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                    example: "+1234567890"
                  otp:
                    type: string
                    example: "123456"
        responses:
          "200":
            description: OTP verified successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: OTP verified successfully
                    token:
                      type: string
                      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    user:
                      $ref: "#/components/schemas/User"
          "400":
            description: Invalid or expired OTP
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Invalid or expired OTP
          "500":
            description: Internal Server Error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Internal Server Error
  /login-with-phone:
    post:
      summary: Login using phone number and password
      description: Allows users to login using their phone number and password.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+1234567890"
                password:
                  type: string
                  example: "yourpassword"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: OTP not verified or wrong password
        '404':
          description: No user found
  /delete-user:
    put:
      summary: Soft delete the authenticated user's account
      description: Mark the authenticated user's account as soft deleted by updating the `status` field to `active`. The user must be signed in to perform this action.
      tags:
        - User
      security:
        - bearerAuth: [] # Requires bearer authentication (JWT)
      responses:
        200:
          description: User account soft deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User account soft deleted successfully"
                  user:
                    $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /update-password-phone:
    put:
      summary: Reset password using phone number
      description: Allows users to reset their password using their phone number.
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: "+1234567890"
                newPassword:
                  type: string
                  example: "newpassword"
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: OTP not verified
        '404':
          description: User not found
        '500':
          description: Internal Server Error
                    
  /upload-image-file:
    post:
      summary: Upload multiple images
      description: Uploads multiple images to the server and processes them using Cloudinary.
      tags:
        - Image Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - images
      responses:
        '200':
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
                      description: URL of the uploaded image
                    public_id:
                      type: string
                      description: Public ID of the uploaded image in Cloudinary
        '400':
          description: No files were uploaded or less than 5 files were provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Error uploading images
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /single-image-upload:
    post:
      summary: Upload a single image
      description: Uploads a single image to the server and processes it using Cloudinary.
      tags:
        - Image Upload
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: URL of the uploaded image
                  public_id:
                    type: string
                    description: Public ID of the uploaded image in Cloudinary
        '400':
          description: No file was uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Error uploading image
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /create-list:
    post:
      summary: Create a new property listing
      description: Create a new property listing with the provided details.
      tags:
        - List
      security:
        - bearerAuth: []  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                typeOfproperty:
                  type: string
                  enum:
                    - House
                    - Apartment
                    - Barn
                    - Bed & Breakfast
                    - Boat
                    - Cabin
                    - Castle
                    - Camper/RV
                    - Casa Particular
                    - Cave
                    - Container
                    - Dammuso
                    - Dome
                    - Cycladic Home
                    - Earth Home
                    - Tent
                    - Tiny Home
                    - Tower
                    - Tree House
                    - Trullo
                    - Yurt
                    - Windmill
                  default: House
                propertyCondition:
                  type: string
                  enum:
                    - full-furnished
                    - semi-furnished
                    - empty
                typeOfguests:
                  type: string
                  enum:
                    - An Entire Place
                    - A Room
                    - A Shared Room
                  default: An Entire Place
                propertyTitle:
                  type: string
                description:
                  type: string
                outdoorShower:
                  type: boolean
                  default: false
                propertyFeature:
                  type: object
                  properties:
                    exclusive:
                      type: boolean
                      default: false
                    nature:
                      type: boolean
                      default: false
                    hill:
                      type: boolean
                      default: false
                    seaBeatch:
                      type: boolean
                      default: false
                    lakeView:
                      type: boolean
                      default: false
                    Home:
                      type: boolean
                      default: false
                    room:
                      type: boolean
                      default: false
                    cottage:
                      type: boolean
                      default: false
                favorites:
                  type: object
                  properties:
                    wifi:
                      type: boolean
                      default: false
                    tv:
                      type: boolean
                      default: false
                    kitchen:
                      type: boolean
                      default: false
                    washer:
                      type: boolean
                      default: false
                    freeParking:
                      type: boolean
                      default: false
                    paidParking:
                      type: boolean
                      default: false
                    airCondition:
                      type: boolean
                      default: false
                    dedicatedWorkSpace:
                      type: boolean
                      default: false
                safety:
                  type: object
                  properties:
                    smokeAlarm:
                      type: boolean
                      default: false
                    fireExtingguisher:
                      type: boolean
                      default: false
                    firstAidKit:
                      type: boolean
                      default: false
                    carbonMonoxidealarm:
                      type: boolean
                      default: false
                amenities:
                  type: object
                  properties:
                    outdoorScenicView:
                      type: object
                      additionalProperties:
                        type: boolean
                    cookingCleaning:
                      type: object
                      additionalProperties:
                        type: boolean
                    internetOffice:
                      type: object
                      additionalProperties:
                        type: boolean
                    service:
                      type: object
                      additionalProperties:
                        type: boolean
                    notIncluded:
                      type: object
                      additionalProperties:
                        type: boolean
                    bathroom:
                      type: object
                      additionalProperties:
                        type: boolean
                    bedroomLaundry:
                      type: object
                      additionalProperties:
                        type: boolean
                    parkingFacilities:
                      type: object
                      additionalProperties:
                        type: boolean
                    general:
                      type: object
                      additionalProperties:
                        type: boolean
                totalroom:
                  type: object
                  properties:
                    bedRoom:
                      type: integer
                      default: 0
                    diningRoom:
                      type: integer
                      default: 0
                    washRoom:
                      type: integer
                      default: 0
                    others:
                      type: integer
                      default: 0
                totalBed:
                  type: object
                  properties:
                    singleBed:
                      type: integer
                      default: 0
                    doubleBed:
                      type: integer
                      default: 0
                    extrabed:
                      type: integer
                      default: 0
                availablecheck:
                  type: object
                  properties:
                    checkin:
                      type: string
                      enum:
                        - as soon as possible
                    startBookingDate:
                      type: string
                    thirtyPluseNight:
                      type: boolean
                      default: false
                    maximumNight:
                      type: string
                    stopGettingBook:
                      type: boolean
                      default: false
                    stopBookingDate:
                      type: string
                homeRule:
                  type: object
                  properties:
                    pets:
                      type: boolean
                      default: false
                    evenorPartys:
                      type: boolean
                      default: false
                    checkinTimes:
                      type: string
                    checkouttimes:
                      type: string
                adults:
                  type: integer
                  default: 4
                under14:
                  type: integer
                gender:
                  type: string
                  enum:
                    - male
                    - female
                    - anyone
                aprovingmethod:
                  type: string
                  enum:
                    - instant
                    - manually
                price:
                  type: number
                serviceFee:
                  type: number
                tex:
                  type: number
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                      public_id:
                        type: string
                location:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - Point
                    coordinates:
                      type: array
                      items:
                        type: number
                    country:
                      type: string
                    fllor:
                      type: string
                    streetAddress:
                      type: string
                    address:
                      type: string
                    addresstwo:
                      type: string
                    thana:
                      type: string
                    district:
                      type: string
                    postcode:
                      type: string
                    googlemap:
                      type: string
                bedge:
                  type: string
                status:
                  type: string
                  default: inactive
              required:
                - typeOfproperty
                - propertyCondition
                - typeOfguests
                - propertyTitle
                - price
                - serviceFee
                - tex
                - Postedby
                - gender
                - aprovingmethod
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /all-list:
    get:
      summary: Retrieve a list of items
      description: Fetches a paginated list of items, populated with the `Postedby` user's name, sorted by creation date.
      tags:
        - List
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved the list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Server Error'
  /get-single-list/{id}:
    get:
      summary: Retrieve a single listing by ID
      tags:
        - List
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the listing to retrieve
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved the listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '404':
          description: Listing not found
        '500':
          description: Server error
  
  /update-list/{id}:
    put:
      summary: Update a listing by ID
      tags:
        - List
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the listing to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUpdate'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully updated the listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          description: Bad request or unauthorized
        '404':
          description: Listing not found
        '500':
          description: Server error
  
  /delete-list/{id}:
    delete:
      summary: Delete a listing by ID
      tags:
        - List
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the listing to delete
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Successfully deleted the listing
        '404':
          description: Listing not found
        '500':
          description: Server error
  /favoriteslist-list/{id}:
    put:
      tags:
        - Favorites
      summary: Add a property to the user's favorites list
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the property to add to favorites
      responses:
        200:
          description: Property successfully added to favorites
        500:
          description: Server error  
  /unfavoriteslist-list/{id}:
    put:
      tags:
        - Favorites
      summary: Remove a property from the user's favorites list
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the property to remove from favorites
      responses:
        200:
          description: Property successfully removed from favorites
        500:
          description: Server error
  /book/{id}:
    post:
      tags:
        - Booking
      summary: Book a property for a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the property to book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                checkinDate:
                  type: string
                  format: date
                  example: '2024-10-01'
                checkoutDate:
                  type: string
                  format: date
                  example: '2024-10-07'
                price:
                  type: number
                  example: 200
      responses:
        200:
          description: Redirect to payment gateway
        400:
          description: The selected dates are already booked
        500:
          description: Server error

  /check-available/{id}:
    get:
      tags:
        - Booking
      summary: Check if property is available for booking
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the property to check availability
      responses:
        200:
          description: The selected dates are available
        400:
          description: The selected dates are already booked
        500:
          description: Error checking availability

  /get-single-user/{id}:
    get:
      tags:
        - User
      summary: Get user details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to retrieve
      responses:
        200:
          description: User details retrieved successfully
        400:
          description: User not found
        500:
          description: Server error

  /user-favoriteslist/{id}:
    get:
      tags:
        - Favorites
      summary: Get the user's favorites list
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to retrieve   
      responses:
        200:
          description: Favorites list retrieved successfully
        400:
          description: User not found
        500:
          description: Server error

  /user-booking-list:
    get:
      tags:
        - Booking
      summary: Get the list of properties booked by the current user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Booking list retrieved successfully
        500:
          description: Server error

  /payment-success:
    put:
      tags:
        - Payment
      summary: Update booking status after successful payment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tran_id:
                  type: string
                  description: Transaction ID from payment provider
                status:
                  type: string
                  description: Payment status
                  example: success
      responses:
        200:
          description: Payment successful, booking confirmed
        404:
          description: Booking not found
        500:
          description: Error processing payment success

  /fail-payment:
    put:
      tags:
        - Payment
      summary: Handle payment failure and cancel booking
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tran_id:
                  type: string
                  description: Transaction ID from payment provider
      responses:
        400:
          description: Payment failed, booking canceled
        500:
          description: Error processing payment failure   
  /admin/failed-booking-all:
    get:
      summary: Get all failed bookings
      description: Retrieve all failed bookings including the associated users and properties.
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all failed bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        500:
          description: Error retrieving failed bookings
  /admin/get-single-list/{id}:
    get:
      summary: Get a specific list
      description: Retrieve details of a specific list by its ID.
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the list to retrieve
      security:
        - bearerAuth: []
      responses:
        200:
          description: List details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        404:
          description: List not found
        500:
          description: Error retrieving list details
  /admin/published-list/{id}:
    put:
      summary: Publish a list
      description: Approve and publish a specific list (property).
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the list to approve and publish
      security:
        - bearerAuth: []
      responses:
        200:
          description: List published successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        404:
          description: List not found
        500:
          description: Error publishing list

  /admin/booking-confirm/{id}:
    put:
      summary: Confirm a booking
      description: Approve a pending booking by updating its status to 'confirmed'.
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the booking to approve
      security:
        - bearerAuth: []
      responses:
        200:
          description: Booking confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        404:
          description: Booking not found
        500:
          description: Error confirming booking

  /admin/create-admin/{id}:
    put:
      summary: Create a new admin
      description: Approve and change the role of a user to 'admin'.
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to promote to admin
      security:
        - bearerAuth: []
      responses:
        200:
          description: User promoted to admin successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Error promoting user to admin 
  /admin/all-user:
    get:
      summary: Get all users
      description: Retrieve a list of all users in the system.
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Error retrieving users

  /admin/all-list:
    get:
      summary: Get all lists
      description: Retrieve all property lists.
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of all properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        500:
          description: Error retrieving lists
  /admin/block-user/{id}:
    put:
      summary: Block a user
      description: Block a specific user by updating their status to 'inactive'.
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to block
      security:
        - bearerAuth: []
      responses:
        200:
          description: User blocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Error blocking user
  /admin/get-pending/:
    get:
      summary: Retrieve Pending Bookings
      description: Fetches a list of bookings with a "pending" status, including details of the property and user.
      tags:
        - Admin
      security:
        - bearerAuth: []  # Adjust if your security scheme is named differently
      responses:
        '200':
          description: Successful retrieval of pending bookings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking' 
        404:
          description: Booking not found
        500:
          description: Error confirming booking
  /admin/published-from-host/{id}:
    put:
      summary: Approve and Publish a List
      description: Updates the status of a list to "published" based on the provided ID.
      tags:
        - Admin
      security:
        - bearerAuth: []  # Adjust if your security scheme is named differently
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the list to be published.
          schema:
            type: string
      responses:
        '200':
          description: List approved and published successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message indicating approval.
                  list:
                    $ref: '#/components/schemas/List'  # Reference to your existing list schema
        '404':
          description: List not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the list was not found.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating an internal server issue.
  /messages:
    post:
      tags:
        - Messaging
      summary: Send a message
      security:
        - bearerAuth: []
      parameters:
        - name: message
          in: body
          required: true
          schema:
            type: object
            properties:
              sender:
                type: object
                properties:
                  id:
                    type: string
                    example: "60d0fe4f5311236168a109ca"
              receiver:
                type: object
                properties:
                  id:
                    type: string
                    example: "60d0fe4f5311236168a109cb"
              message:
                type: string
                example: "Hello, how are you?"
      responses:
        200:
          description: Message sent successfully
          schema:
            type: object
            properties:
              id:
                type: string
                example: "60d0fe4f5311236168a109cd"
              sender:
                type: string
                example: "60d0fe4f5311236168a109ca"
              receiver:
                type: string
                example: "60d0fe4f5311236168a109cb"
              message:
                type: string
                example: "Hello, how are you?"
              isRead:
                type: boolean
                example: false
              isDelivered:
                type: boolean
                example: false
              createdAt:
                type: string
                format: date-time
                example: "2024-09-15T12:30:00Z"
              updatedAt:
                type: string
                format: date-time
                example: "2024-09-15T12:30:00Z"
        400:
          description: Bad request, invalid data
        401:
          description: Unauthorized, invalid token
        500:
          description: Server error

  /messages/{id}:
    get:
      tags:
        - Messaging
      summary: Get a message by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        200:
          description: Message details
          schema:
            type: object
            properties:
              id:
                type: string
                example: "60d0fe4f5311236168a109cd"
              sender:
                type: string
                example: "60d0fe4f5311236168a109ca"
              receiver:
                type: string
                example: "60d0fe4f5311236168a109cb"
              message:
                type: string
                example: "Hello, how are you?"
              isRead:
                type: boolean
                example: false
              isDelivered:
                type: boolean
                example: false
              createdAt:
                type: string
                format: date-time
                example: "2024-09-15T12:30:00Z"
              updatedAt:
                type: string
                format: date-time
                example: "2024-09-15T12:30:00Z"
        404:
          description: Message not found
        500:
          description: Server error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 60d0fe4f5311236168a109ca
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: user@example.com
        phone:
          type: string
          example: "+1234567890"
        fatherName:
          type: string
          example: John Smith
        motherName:
          type: string
          example: Jane Smith
        presentAddress:
          type: string
          example: "123 Current St, City, Country"
        parmanentAddress:
          type: string
          example: "456 Permanent Rd, City, Country"
        birth:
          type: string
          example: "1990-01-01"
        idNumber:
          type: string
          example: "AB123456789"
        otp:
          type: string
          example: "123456"
        otpExpires:
          type: string
          format: date-time
          example: "2024-09-15T12:30:00Z"
        isVerified:
          type: boolean
          example: false
        isOtpVerified:
          type: boolean
          example: false
        role:
          type: string
          example: user
        status:
          type: string
          example: inactive
        favoritelist:
           type: array
           items:
             type: string
             example: "60d0fe4f5311236168a109cb" # Reference to List model
           description: An array of ObjectId references to the favorited lists.  
    List:
      type: object
      properties:
        typeOfproperty:
          type: string
        propertyCondition:
          type: string
        typeOfguests:
          type: string
        propertyTitle:
          type: string
        description:
          type: string
        outdoorShower:
          type: boolean
        propertyFeature:
          $ref: '#/components/schemas/PropertyFeature'
        favorites:
          $ref: '#/components/schemas/Favorites'
        safety:
          $ref: '#/components/schemas/Safety'
        amenities:
          $ref: '#/components/schemas/Amenities'
        totalroom:
          $ref: '#/components/schemas/TotalRoom'
        totalBed:
          $ref: '#/components/schemas/TotalBed'
        availablecheck:
          $ref: '#/components/schemas/AvailableCheck'
        homeRule:
          $ref: '#/components/schemas/HomeRule'
        adults:
          type: integer
        under14:
          type: integer
        gender:
          type: string
        aprovingmethod:
          type: string
        price:
          type: number
        serviceFee:
          type: number
        tex:
          type: number
        images:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              public_id:
                type: string
        location:
          $ref: '#/components/schemas/Location'
        bedge:
          type: string
        status:
          type: string
        Postedby:
          type: string
        Review:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              created:
                type: string
                format: date-time
              postedBy:
                type: string
    PropertyFeature:
      type: object
      properties:
        exclusive:
          type: boolean
        nature:
          type: boolean
        hill:
          type: boolean
        seaBeatch:
          type: boolean
        lakeView:
          type: boolean
        Home:
          type: boolean
        room:
          type: boolean
        cottage:
          type: boolean
    Favorites:
      type: object
      properties:
        wifi:
          type: boolean
        tv:
          type: boolean
        kitchen:
          type: boolean
        washer:
          type: boolean
        freeParking:
          type: boolean
        paidParking:
          type: boolean
        airCondition:
          type: boolean
        dedicatedWorkSpace:
          type: boolean
    Safety:
      type: object
      properties:
        smokeAlarm:
          type: boolean
        fireExtingguisher:
          type: boolean
        firstAidKit:
          type: boolean
        carbonMonoxidealarm:
          type: boolean
    Amenities:
      type: object
      properties:
        outdoorScenicView:
          type: object
          additionalProperties:
            type: boolean
        cookingCleaning:
          type: object
          additionalProperties:
            type: boolean
        internetOffice:
          type: object
          additionalProperties:
            type: boolean
        service:
          type: object
          additionalProperties:
            type: boolean
        notIncluded:
          type: object
          additionalProperties:
            type: boolean
        bathroom:
          type: object
          additionalProperties:
            type: boolean
        bedroomLaundry:
          type: object
          additionalProperties:
            type: boolean
        parkingFacilities:
          type: object
          additionalProperties:
            type: boolean
        general:
          type: object
          additionalProperties:
            type: boolean
    TotalRoom:
      type: object
      properties:
        bedRoom:
          type: integer
        diningRoom:
          type: integer
        washRoom:
          type: integer
        others:
          type: integer
    TotalBed:
      type: object
      properties:
        singleBed:
          type: integer
        doubleBed:
          type: integer
        extrabed:
          type: integer
    AvailableCheck:
      type: object
      properties:
        checkin:
          type: string
        startBookingDate:
          type: string
        thirtyPluseNight:
          type: boolean
        maximumNight:
          type: string
        stopGettingBook:
          type: boolean
        stopBookingDate:
          type: string
    HomeRule:
      type: object
      properties:
        pets:
          type: boolean
        evenorPartys:
          type: boolean
        checkinTimes:
          type: string
        checkouttimes:
          type: string
    Location:
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            type: number
        country:
          type: string
        fllor:
          type: string
        streetAddress:
          type: string
        address:
          type: string
        addresstwo:
          type: string
        thana:
          type: string
        district:
          type: string
        postcode:
          type: string
        googlemap:
          type: string
    ListUpdate:
      type: object
      properties:
        typeOfproperty:
          type: string
        propertyCondition:
          type: string
        propertyTitle:
          type: string
        description:
          type: string
        location:
          type: object
          properties:
            country:
              type: string
            streetAddress:
              type: string
            coordinates:
              type: array
              items:
                type: number     
    Booking:
      type: object
      properties:
        id:
          type: string
          example: "60d0fe4f5311236168a109ca"  # ObjectId reference for booking ID
        user:
          type: string
          example: "60d0fe4f5311236168a109cb"  # ObjectId reference for User
        property:
          type: string
          example: "60d0fe4f5311236168a109cc"  # ObjectId reference for Property (List model)
        checkinDate:
          type: string
          format: date
          example: "2024-09-15"
        checkoutDate:
          type: string
          format: date
          example: "2024-09-20"
        price:
          type: number
          example: 200.50
        status:
          type: string
          enum:
            - pending
            - confirmed
            - failed
          example: "pending"
        tran_id:
          type: string
          example: "TRX12345"
        createdAt:
          type: string
          format: date-time
          example: "2024-09-01T12:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-09-01T12:35:00Z" 
    FailedBooking:
      type: object
      properties:
        user:
          type: string
          example: "60d0fe4f5311236168a109ca" # ObjectId reference to User
        property:
          type: string
          example: "60d0fe4f5311236168a109cb" # ObjectId reference to Property
        tran_id:
          type: string
          example: "TRX12345"
        checkinDate:
          type: string
          format: date
          example: "2024-09-15"
        checkoutDate:
          type: string
          format: date
          example: "2024-09-20"
        price:
          type: number
          example: 200.50
        reason:
          type: string
          example: "Payment failed"
        date:
          type: string
          format: date-time
          example: "2024-09-21T12:30:00Z"
