# name: Node.js CI/CD with Docker

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     env:
#       DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#       DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

#     steps:
#       - uses: actions/checkout@v3

#       - uses: actions/setup-node@v3
#         with:
#           node-version: '16'

#       - run: npm install

#       - run: |
#           IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
#           echo "Building Docker image with tag: $IMAGE_TAG"
#           docker build -t $IMAGE_TAG .

#       - uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - run: |
#           IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
#           echo "Pushing Docker image with tag: $IMAGE_TAG"
#           docker push $IMAGE_TAG

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/master'

#     env:
#       DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#       MONGODB_URI: ${{ secrets.MONGODB_URI }}
#       JWT_SECRET: ${{ secrets.JWT_SECRET }}
#       StoreID: ${{ secrets.StoreID }}
#       StorePassword: ${{ secrets.StorePassword }}
#       CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
#       CLIENT_ID: ${{ secrets.CLIENT_ID }}
#       PORT: ${{ secrets.PORT }}

#     steps:
#       - uses: actions/checkout@v3

#       - name: Setup SSH
#         run: |
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
#           chmod 600 private_key
#           ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

#       - name: Deploy to server with SSH
#         uses: appleboy/scp-action@v0.1.7
#         with:
#           host: ${{ secrets.SERVER_IP }}
#           username: root
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: ${{ secrets.SSH_PORT }}
#           source: "./"
#           target: "/root/deployment"

#       - name: Execute Deployment Script on Server
#         run: |
#           ssh -i private_key -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
#             echo "Restarting Docker service and configuring iptables..."
#             sudo systemctl restart docker
#             echo '{"iptables": true}' | sudo tee /etc/docker/daemon.json
#             sudo systemctl restart docker
#             IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
#             echo "Pulling and running Docker image with tag: $IMAGE_TAG"
#             docker pull $IMAGE_TAG
#             docker stop restapitest || true
#             docker rm restapitest || true
#             docker run -d --name restapitest -p 5001:5001 \
#                 -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
#                 -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
#                 -e StoreID="${{ secrets.StoreID }}" \
#                 -e StorePassword="${{ secrets.StorePassword }}" \
#                 -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
#                 -e CLIENT_ID="${{ secrets.CLIENT_ID }}" \
#                 -e PORT="${{ secrets.PORT }}" \
#                 --restart unless-stopped $IMAGE_TAG
#           EOF
name: Node.js CI/CD with Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - run: npm install

      - run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
          echo "Pushing Docker image with tag: $IMAGE_TAG"
          docker push $IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      StoreID: ${{ secrets.StoreID }}
      StorePassword: ${{ secrets.StorePassword }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      PORT: ${{ secrets.PORT }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          # Create the .ssh directory if it doesn't exist
          mkdir -p ~/.ssh
          # Set proper permissions for the .ssh directory
          chmod 700 ~/.ssh
          # Add the SSH private key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          # Use ssh-keyscan to add the server's key to the known_hosts file
          ssh-keyscan -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts
          # Set permissions for the known_hosts file
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy to server with SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "./"
          target: "/root/deployment"

      - name: Execute Deployment Script on Server
        run: |
          ssh -i private_key -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            echo "Restarting Docker service and configuring iptables..."
            sudo systemctl restart docker
            echo '{"iptables": true}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
            echo "Pulling and running Docker image with tag: $IMAGE_TAG"
            docker pull $IMAGE_TAG
            docker stop restapitest || true
            docker rm restapitest || true
            docker run -d --name restapitest -p 5001:5001 \
                -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
                -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                -e StoreID="${{ secrets.StoreID }}" \
                -e StorePassword="${{ secrets.StorePassword }}" \
                -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
                -e CLIENT_ID="${{ secrets.CLIENT_ID }}" \
                -e PORT="${{ secrets.PORT }}" \
                --restart unless-stopped $IMAGE_TAG
          EOF
