
name: Node.js CI/CD with Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - run: npm install

      - run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
          echo "Pushing Docker image with tag: $IMAGE_TAG"
          docker push $IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      MONGODB_URI: ${{secrets.MONGODB_URI}}
      JWT_SECRET: ${{secrets.JWT_SECRET}}
      StoreID : ${{secrets.StoreID}}
      StorePassword: ${{secrets.StorePassword}}
      CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
      CLIENT_ID : ${{secrets.CLIENT_ID}}
      PORT : ${{secrets.PORT}}
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to server using SSH and Docker
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port : ${{secrets.port}}
          script: |
            echo "Restarting Docker service and ensuring iptables is configured..."
            sudo systemctl restart docker
            echo '{"iptables": true}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
            echo "Deploying Docker image with tag: $IMAGE_TAG"
             # Stop any process using the previous port (5001)
            echo "Stopping any process using port 5001..."
            sudo fuser -k 5001/tcp || true
            # Open port 5001 on the firewall if it's closed (for UFW)
            echo "Opening port 5001 on the firewall..."
            sudo ufw allow 5001/tcp || true
            # Pull, stop, and remove any existing container
            docker pull $IMAGE_TAG
            docker stop restapitest || true
            docker rm restapitest || true
            # Run the new container
            
            docker run -d --name restapitest -p 5001:5001 \
                -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
                -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                -e StoreID="${{ secrets.StoreID }}" \
                -e StorePassword="${{ secrets.StorePassword }}" \
                -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
                -e CLIENT_ID="${{ secrets.CLIENT_ID }}" \
                -e PORT="${{ secrets.PORT }}" \
                --restart unless-stopped $IMAGE_TAG   