name: Node.js CI/CD with Docker

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # Check out the repository code
      - uses: actions/checkout@v3

      # Set up Node.js environment
      - uses: actions/setup-node@v3
        with:
          node-version: '21'

      # Install npm dependencies
      - run: npm install

      # Build the Docker image
      - run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .

      # Log in to DockerHub
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the Docker image to DockerHub
      - run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
          echo "Pushing Docker image with tag: $IMAGE_TAG"
          docker push $IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      StoreID: ${{ secrets.StoreID }}
      StorePassword: ${{ secrets.StorePassword }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      PORT: ${{ secrets.PORT }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}

    steps:
      # Check out the repository code
      - name: Check out the code
        uses: actions/checkout@v3

      # Set up SSH and save private key
      - name: Set up SSH
        run: |
          # Save the private SSH key to a file
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Optional: Disable strict host checking (use carefully)
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null" >> ~/.ssh/config

      # Test SSH connection to the remote server
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "echo 'SSH connection successful!'"

      # Deploy files to the remote server using SCP
      - name: Deploy files using SCP
        run: |
          # Copy the necessary files to the remote server
          scp -i ~/.ssh/id_rsa -P ${{ secrets.SSH_PORT }} -r ./ root@${{ secrets.SERVER_IP }}:/root/deployment

      # Execute deployment script on the remote server
      - name: Execute Deployment Script on Server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            echo "Restarting Docker service and configuring iptables..."
            sudo systemctl restart docker
            echo '{"iptables": true}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker
            IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/restapitest:latest"
            echo "Pulling and running Docker image with tag: $IMAGE_TAG"
            docker pull $IMAGE_TAG
            docker stop restapitest || true
            docker rm restapitest || true
            docker run -d --name restapitest -p 5001:5001 \
                -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
                -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                -e StoreID="${{ secrets.StoreID }}" \
                -e StorePassword="${{ secrets.StorePassword }}" \
                -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
                -e CLIENT_ID="${{ secrets.CLIENT_ID }}" \
                -e PORT="${{ secrets.PORT }}" \
                --restart unless-stopped $IMAGE_TAG
          EOF
